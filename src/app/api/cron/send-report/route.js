import { NextResponse } from 'next/server';
import { db } from '@/app/lib/firebaseAdmin';
import { sendLineMessage } from '@/app/actions/lineActions';
import { Timestamp, FieldPath } from 'firebase-admin/firestore';

export async function GET(request) {
    try {
        const settingsRef = db.collection('settings').doc('notifications');
        const settingsDoc = await settingsRef.get();
        if (!settingsDoc.exists) {
            console.log("Settings not found. Cron job exiting.");
            return NextResponse.json({ message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" });
        }
        
        const settingsData = settingsDoc.data();
        const { reportSendTime, reportRecipients, lastReportSentDate } = settingsData;
        
        // --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏ã‡∏ô GMT+7 ---
        const now = new Date();
        const gmt7Time = new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Bangkok' }));
        const currentHour = gmt7Time.getHours();
        const [settingHour] = reportSendTime.split(':').map(Number);
        
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        if (currentHour !== settingHour) {
            return NextResponse.json({ message: `Current hour: ${currentHour}, Scheduled for: ${settingHour}. Skipping.` });
        }
        
        // --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á Report ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ---
        const todayStr = gmt7Time.toISOString().split('T')[0]; // Format: YYYY-MM-DD
        if (lastReportSentDate === todayStr) {
            return NextResponse.json({ message: `Report for ${todayStr} already sent. Skipping.` });
        }

        // --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Report (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á) ---
        if (!reportRecipients || reportRecipients.length === 0) {
            return NextResponse.json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ" });
        }

        const recipientLineIds = (await db.collection('admins').where(FieldPath.documentId(), 'in', reportRecipients).get())
            .docs.map(doc => doc.data().lineUserId).filter(Boolean);

        if (recipientLineIds.length === 0) {
            return NextResponse.json({ message: "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Line User ID" });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        const reportDate = new Date(gmt7Time);
        reportDate.setHours(0,0,0,0);
        const nextDay = new Date(reportDate);
        nextDay.setDate(reportDate.getDate() + 1);

        const bookingsSnapshot = await db.collection('bookings')
            .where('createdAt', '>=', Timestamp.fromDate(reportDate))
            .where('createdAt', '<', Timestamp.fromDate(nextDay))
            .get();
        
        const todaysBookings = bookingsSnapshot.docs.map(doc => doc.data());

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Report
        const reportMessage = `üìä Report ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${reportDate.toLocaleDateString('th-TH')}\n\n` +
            `- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ${todaysBookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
            `- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: ${todaysBookings.filter(b => b.paymentInfo.paymentStatus === 'paid').reduce((sum, b) => sum + b.paymentInfo.totalPrice, 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`;

        await Promise.all(recipientLineIds.map(lineId => sendLineMessage(lineId, reportMessage)));

        // --- 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á Report ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ---
        await settingsRef.update({ lastReportSentDate: todayStr });

        return NextResponse.json({ success: true, message: `‡∏™‡πà‡∏á Report ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${recipientLineIds.length} ‡∏Ñ‡∏ô` });

    } catch (error) {
        console.error("Cron job error:", error);
        return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }
}
